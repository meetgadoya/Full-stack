{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","id","alt","name","email","CardList","robot_list","map","user","i","key","SearchBox","searchchange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","robots","fetch","then","data","json","filteredRobots","filter","rob","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"2PAgBeA,EAbF,SAACC,GAEV,OACI,yBAAKC,UAAY,0DACb,yBAAKC,IAAG,+BAA4BF,EAAMG,GAAlC,iBAAqDC,IAAI,WACjE,6BACI,gCAAMJ,EAAMK,MACZ,+BAAKL,EAAMM,UCOZC,EAdE,SAAC,GAOd,OAP+B,EAAhBC,WACcC,KAAI,SAACC,EAAMC,GACpC,OAAO,kBAAC,EAAD,CAAMC,IAAOD,EAAGR,GAAMO,EAAKP,GAAIE,KAAQK,EAAKL,KAAMC,MAASI,EAAKJ,YCOhEO,EAVG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,kBAAC,WAAD,KACI,2BAAOb,UAAY,mCACnBc,KAAO,SAASC,YAAc,gBAC9BC,SAAYH,MCGTI,EARA,SAAClB,GACZ,OACI,yBAAKmB,MAAQ,CAACC,UAAU,SAAUC,OAAQ,kBAAmBC,OAAS,UACrEtB,EAAMuB,WCkBAC,E,kDApBX,WAAYxB,GAAO,IAAD,8BACd,cAAMA,IACDyB,MAAQ,CACTC,UAAW,GAHD,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAW,M,+BAI1B,OAAGG,KAAKJ,MAAMC,SACH,2DAEJG,KAAK7B,MAAMuB,a,GAhBEQ,aCsEbC,G,wDA/DX,aAAe,IAAD,8BACV,gBAsBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAcD,EAAME,OAAOC,SAtB1C,EAAKZ,MAAQ,CACTa,OAAS,GACTH,YAAc,IAJR,E,gMAkBSI,MAAM,8CACpBC,MAAK,SAAAC,GAAU,OAAOA,EAAKC,U,OAD1BD,E,OAENZ,KAAKC,SAAS,CAACQ,OAASG,I,qIAOnB,IAAD,EAC4BZ,KAAKJ,MAA9Ba,EADH,EACGA,OAASH,EADZ,EACYA,YAEVQ,EAAiBL,EAAOM,QAAO,SAAAC,GACjC,OAAOA,EAAIxC,KAAKyC,cAAcC,SAASZ,EAAYW,kBAGvD,OAAIR,EAAOU,OAKH,yBAAK/C,UAAY,MACb,wBAAIA,UAAY,MAAhB,iBAOA,kBAAC,EAAD,CAAWa,aAAgBe,KAAKI,iBAChC,6BACA,6BACA,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUzB,WAAcmC,OAjBjC,2C,GApCDM,IAAMlB,Y,MCIJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,a","file":"static/js/main.18286e59.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// function Card() {        either this line or below one\r\nconst Card = (props/*{email, id, name}*/) => {\r\n    \r\n    return(\r\n        <div className = 'tc ba bg-light-green dib ma3 pa2 br3 grow bw2 shadow-5' >\r\n            <img src = {`https://robohash.org/${props.id}?size=200x200`} alt='robots'/>\r\n            <div>\r\n                <h3> {props.name}</h3>\r\n                <p> {props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robot_list}) => {\r\n    const cardArray = robot_list.map((user, i) =>{\r\n        return <Card key = {i} id = {user.id} name = {user.name} email = {user.email} />\r\n                // return <Card key = {i} id = {robot_list[i].id} name = {robot_list[i].name} email = {robot_list[i].email} />\r\n\r\n    })\r\n    \r\n    return(\r\n        cardArray \r\n    );\r\n\r\n}\r\n\r\n\r\nexport default CardList;","import React, { Fragment } from 'react';\r\n\r\nconst SearchBox = ({searchchange}) => {\r\n    return (\r\n        <Fragment>\r\n            <input className = \"pa3 ba b--green bg-lightest-blue\"\r\n            type = 'search' placeholder = 'search robots'\r\n            onChange = {searchchange}/>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style ={{overflowY:'scroll', border: '3px solid black', height : '500px'}}>\r\n        {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError : false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError : true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return(<h1>Ooops!! Not for user to see</h1>);\r\n        }\r\n        return this.props.children\r\n    }\r\n\r\n}\r\n\r\nexport default ErrorBoundary","import React from 'react';\r\nimport CardList from '../components/CardList.js';\r\nimport SearchBox from '../components/SearchBox.js';\r\nimport Scroll from '../components/Scroll.js';\r\nimport ErrorBoundary from '../components/ErrorBoundary.js';\r\nimport './App.css';\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots : [],\r\n            searchfield : ''\r\n        }\r\n    }\r\n\r\n    // componentDidMount(){\r\n    //     fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n    //         .then(response => {return response.json()})\r\n    //         .then(users => {this.setState({robots:users})})\r\n    //     // this.setState({robots : robots});\r\n    // }\r\n\r\n    // Either this or above works, this is just added to show\r\n    //  how can we make async calls\r\n    async componentDidMount(){\r\n        const data = await fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n            .then(data => { return data.json()});\r\n        this.setState({robots : data})\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield : event.target.value});\r\n    }\r\n\r\n    render(){\r\n        const {robots , searchfield} =  this.state;\r\n\r\n        const filteredRobots = robots.filter(rob => { \r\n            return rob.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        \r\n        if(!robots.length){\r\n            return(<h1>Loading</h1>);\r\n        }\r\n        else {\r\n            return(\r\n                <div className = \"tc\"> \r\n                    <h1 className = 'f1'> ROBOFRIENDS </h1>\r\n\r\n                    {/*  EVEN FOLLOWING CODE WORKS INSTEAD OF HAVING SEARCHBOX \r\n                    <input className = \"pa3 ba b--green bg-lightest-blue\"\r\n                type = 'search' placeholder = 'search robots'\r\n                onChange = {this.onSearchChange}/>\r\n                    */}\r\n                    <SearchBox searchchange = {this.onSearchChange}/>\r\n                    <br/>\r\n                    <br/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robot_list = {filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './containers/App.js'\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}